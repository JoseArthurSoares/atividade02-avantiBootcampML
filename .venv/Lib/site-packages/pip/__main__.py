import os
import sys
import math
from typing import List

#Questão 1
def retorna_impares(lista: List[int]) -> List[int]:
    impares = []
    for num in lista:
        if num % 2 != 0:
            impares.append(num)
    return impares

#Questão 2
def retorna_primos(lista: List[int]) -> List[int]:
    primos = []
    for num in lista:
        if eh_primo(num):
            primos.append(num)
    return primos
def eh_primo(numero):
    if numero <= 1:
        return False
    if numero <= 3:
        return True
    if numero % 2 == 0 or numero % 3 == 0:
        return False
    for i in range(5, int(math.sqrt(numero)) + 1, 6):
        if numero % i == 0 or numero % (i + 2) == 0:
            return False
    return True

#Questão 3
def verifica_elementos_unicos(lista1: List[int], lista2: List[int]) -> List[int]:
    elementos = []

    for elemento in lista1:
        if elemento not in lista2:
            elementos.append(elemento)

    for elemento in lista2:
        if elemento not in lista1:
            elementos.append(elemento)

    return elementos

#Questão 4
def verifica_maior(lista: List[int]) -> int:
    maior = lista.pop()
    for elemento in lista:
        if elemento > maior:
            maior = elemento
    return maior

#Questão 5
def ordena_tuplas(ltupla):
    if not ltupla:
        return []
    ltuplaOrdenada = []

    for tupla in ltupla:
        if tupla not in ltuplaOrdenada:
            ltuplaOrdenada.append(tupla)

    ltuplaOrdenada.sort(key=lambda x: x[1])

    return ltuplaOrdenada

#Questão 6
'''
import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(5.5, 3.5), constrained_layout=True)

for row in range(2):
    for col in range(2):
        axs[row, col].annotate(f'axs[{row}, {col}]', (0.5, 0.5),
                               transform=axs[row, col].transAxes,
                               ha='center', va='center', fontsize=18,
                               color='darkgrey')

fig.suptitle('plt.subplots()')

plt.show()
'''

#Questão 7
'''
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

x = np.linspace(-2 * np.pi, 2 * np.pi, 100)
y = np.sin(x)

fig, ax = plt.subplots()
ax.plot(x, y)
'''

#Questão 8
'''
import pandas as pd

# Realiza a leitura do arquivo CSV em um DataFrame
df = pd.read_csv('arquivo.csv')

# Exibe as primeiras linhas do DataFrame (por padrão, as 5 primeiras linhas)
print(df.head())

'''

#Questão 9

'''
import pandas as pd

# Suponha que 'df' seja o DataFrame

# Seleciona uma coluna específica utilizando a notação de colchetes []
coluna_especifica = df['nome_da_coluna']

# Outra forma de selecionar uma coluna específica é usando o método loc[]
coluna_especifica = df.loc[:, 'nome_da_coluna']

# Filtra linhas com base em uma condição usando boolean indexing dentro dos colchetes []
linhas_filtradas = df[df['nome_da_coluna'] > valor_limite]

# Filtra linhas com base em uma condição usando o método query()
linhas_filtradas = df.query('nome_da_coluna > @valor_limite')

'''

#Questão 10
'''
Você pode usar os métodos isna(), fillna(), dropna() e interpolate().

# Verifica se há valores ausentes em todo o DataFrame
df.isna()

# Verifica se há valores ausentes em uma coluna específica
df['nome_da_coluna'].isna()

# Preenche os valores ausentes em todo o DataFrame com um valor específico
df.fillna(valor)

# Preenche os valores ausentes em uma coluna específica com a média dos valores não ausentes da mesma coluna
df['nome_da_coluna'].fillna(df['nome_da_coluna'].mean())

# Remove as linhas que contêm pelo menos um valor ausente em qualquer coluna
df.dropna()

# Remove as colunas que contêm pelo menos um valor ausente
df.dropna(axis=1)

# Preenche os valores ausentes usando interpolação linear ao longo do índice
df.interpolate()


'''
if __name__ == "__main__":
    print(retorna_impares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
    print(retorna_primos([2, 3, 4, 9, 5, 7, 11, 13, 17, 19, 23, 29]))
    print(verifica_elementos_unicos([2, 3, 4, 9, 5, 7, 11, 13, 17, 19, 23], [2, 3, 5, 10, 5, 7, 11, 13, 18, 1]))
    print(verifica_maior([2, 3, 4, 9, 5, -1, 11, 13, 17, 19, 23]))
    ltupla = [(3, 'c'), (1, 'a'), (2, 'b')]
    print(ordena_tuplas(ltupla))
